# Core Security Rules

## Environment Variables
- NEVER hardcode API keys, passwords, or sensitive data in source code
- Use environment variables for all credentials
- Create `.env.example` files with placeholder values
- Add `.env` to `.gitignore` to prevent accidental commits

## API Key Protection
```javascript
// ❌ BAD - Hardcoded credentials
const API_KEY = "sk-1234567890abcdef";

// ✅ GOOD - Environment variable
const API_KEY = process.env.OPENAI_API_KEY;
```

## Authentication
- Implement proper authentication for all user-facing features
- Use secure session management
- Validate all user inputs
- Implement rate limiting for API endpoints

## Data Protection
- Encrypt sensitive data at rest
- Use HTTPS for all communications
- Implement proper CORS policies
- Sanitize user inputs to prevent injection attacks

## Security Headers
```javascript
// Add security headers
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'"],
      imgSrc: ["'self'", "data:", "https:"],
    },
  },
}));
```

## Code Security
- Regular dependency updates
- Use security linters (eslint-plugin-security)
- Implement input validation
- Avoid eval() and similar dangerous functions
- Use parameterized queries for database operations

## Accessibility Security
- Ensure screen readers don't expose sensitive information
- Implement proper ARIA labels for security-related elements
- Test with assistive technologies